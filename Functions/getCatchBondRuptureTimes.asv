function [rupture_times, switched_array,switched_times, rupture_forces,switched_forces,lr,slr] = getCatchBondRuptureTimes(testData,Fparam,T,ramporclamporramps2f,experiments,p,nbp)

l = testData.hookL; % hook length
xddagger = 0.238*2 + (l-2) * (0.005 * l + 0.085);          
b = physconst('Boltzmann');                                 %J/K

slopeJ = testData.jawSlope;
slopeH = testData.hookSlope;
interceptJ = testData.jawInt;
interceptH = testData.hookInt;

tb0 = 10^interceptH;

if isequal(ramporclamporramps2f,'ramp')

    Fdot = Fparam;

    rupture_times = zeros(size(1:experiments));
    switched_array = zeros(size(1:experiments));
    switched_times = nan(size(1:experiments));
    rupture_forces = zeros(size(1:experiments));
    switched_forces = zeros(size(1:experiments));


    for i = 1:experiments
        time = 0;
        ruptured = false;
        switched = false;
        time_increment = 0.001;
        while(~ruptured)

            force = Fdot * time;
            tauFJ = 10^((slopeJ * force) + interceptJ);
            tauFH = 10^((slopeH * force) + interceptH);
            tauFH2 = tb0 * exp((-force*xddagger*10^-21)/(b*T));

            if switched
                if rand() > exp(-time_increment*(1/tauFH2))
                    ruptured = true;
                    rupture_times(i) = time;
                    rupture_forces(i) = force;
                end
            else
                if rand() > exp(-time_increment*(1/tauFJ))
                    switched = true;
                    switched_times(i) = time;
                    switched_forces(i) = force;
                end
                if rand() > exp(-time_increment*(1/tauFH))
                    ruptured = true;
                    rupture_times(i) = time;
                    rupture_forces(i) = force;
                end

            end
            time = time + time_increment;

        end
        switched_array(i) = switched;
    end
elseif isequal(ramporclamporramps2f,'ramps2f')
        v = Fparam;

    rupture_times = zeros(size(1:experiments));
    switched_array = zeros(size(1:experiments));
    switched_times = nan(size(1:experiments));
    rupture_forces = zeros(size(1:experiments));
    switched_forces = zeros(size(1:experiments));
    lr = zeros(size(1:experiments));
    slr = zeros(size(1:experiments));

    for i = 1:experiments
        time = 0;
        oldforce = 0;
        ruptured = false;
        switched = false;
        time_increment = 0.01/v;
        while(~ruptured)

            [force,~,~] = OT_stretch2force(v,time,p.Lp,p.Lc*nbp,p.S,0.57,0.47,T);
            tauFJ = 10^((slopeJ * force) + interceptJ);
            tauFH = 10^((slopeH * force) + interceptH);
            tauFH2 = tb0 * exp((-force*xddagger*10^-21)/(b*T));

            if switched
                if rand() > exp(-time_increment*(1/tauFH2))
                    ruptured = true;
                    rupture_times(i) = time;
                    rupture_forces(i) = force;
                    lr(i) = (force - oldforce)/time_increment;
                end
            else
                if rand() > exp(-time_increment*(1/tauFJ))
                    switched = true;
                    switched_times(i) = time;
                    switched_forces(i) = force;
                    slr(i) = (force - oldforce)/time_increment;
                end
                if rand() > exp(-time_increment*(1/tauFH))
                    ruptured = true;
                    rupture_times(i) = time;
                    rupture_forces(i) = force;
                    lr(i) = (force - oldforce)/time_increment;
                end

            end
            time = time + time_increment;
            oldforce = force;

        end
        switched_array(i) = switched;
    end

elseif isequal(ramporclamporramps2f,'clamp')

    F_array = Fparam;

    mean_rupture_times = zeros(1,length(F_array));
    rupture_times = zeros(experiments,length(F_array));
    switched_array = zeros(experiments,length(F_array));
    switched_times = nan(experiments,length(F_array));

    count = 0;
    for force = F_array
        count = count + 1;
        tauFJ = 10^((slopeJ * force) + interceptJ);
        tauFH = 10^((slopeH * force) + interceptH);
        tauFH2 = tb0 * exp((-force*xddagger*10^-21)/(b*T));

        for i = 1:experiments
            time = 0;
            ruptured = false;
            switched = false;
            while(~ruptured)
                if switched
                    time_increment = tauFH2/100;
                else
                    time_increment = min([tauFJ,tauFH])/100;
                end
                if switched
                    if rand() > exp(-time_increment/tauFH2)
                        ruptured = true;
                        rupture_times(i,count) = time;
                    end
                else
                    if rand() > exp(-time_increment/tauFJ)
                        switched = true;
                        switched_times(i,count) = time;
                    end
                    if rand() > exp(-time_increment/tauFH)
                        ruptured = true;
                        rupture_times(i,count) = time;
                    end

                end
                time = time + time_increment;
            end
            switched_array(i,count) = switched;
        end

        mean_rupture_times(count) = mean(rupture_times(:,count),'omitnan');
    end
end

end